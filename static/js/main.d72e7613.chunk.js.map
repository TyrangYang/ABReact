{"version":3,"sources":["components/User/UserBoard.module.css","components/Bill/AddBillForm.module.css","components/ContentContainers/PanelContainer.jsx","slice/userSlice.js","components/ContentContainers/ModalBox.jsx","components/User/AddNewUser.jsx","components/ContentContainers/TableDisplay.jsx","components/User/UserBoard.jsx","components/Layout/UserPanel.jsx","slice/billSlice.js","hooks/useUserName.jsx","components/Bill/MultiLineSlider.jsx","components/widgets/HoverHelpWidget.jsx","components/Bill/AddBillForm.jsx","components/widgets/DeleteBtnWithConfirmModal.jsx","components/Bill/BillTableDisplay.jsx","components/Bill/BillDisplay.jsx","components/Summary/SummaryDisplay.jsx","hooks/useSummary.jsx","components/Summary/SummaryBoard.jsx","components/Summary/Charts/UserMoneyStatusPieChart.jsx","components/Layout/BillPanel.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","app/store.js","index.js","components/Summary/SummaryBoard.module.css"],"names":["module","exports","React","memo","props","Paper","elevation","style","margin","padding","overflow","data-testid","children","userSlice","createSlice","name","initialState","allUsers","id","reducers","addUser","state","action","payload","removeUser","filter","e","actions","Styles","background","position","width","height","top","left","backgroundColor","zIndex","contentWrapper","transform","onClick","target","onClickBackground","AddNewUser","useState","showAddUserForm","setShowAddUserForm","useSelector","Users","dispatch","useDispatch","useForm","register","handleSubmit","errors","Button","color","startIcon","PersonAdd","display","justifyContent","alignItems","IconButton","Close","className","addUserForm","onSubmit","uuidV4","newName","toUpperCase","TextField","type","placeholder","inputRef","required","validate","notHaveSameName","val","reduce","acc","cur","error","helperText","variant","endIcon","Check","TableDisplay","headers","tableContent","TableContainer","component","Table","aria-label","TableHead","TableRow","map","eachHead","idx","TableCell","align","key","TableBody","row","i","UserBoard","allBills","Bills","billRef","useRef","useMemo","current","payer","participants","includes","alert","window","confirm","Delete","useEffect","length","UserPanel","billSlice","amount","currency","precision","date","addBill","removeBill","useUserName","id_name_map","throttle","fn","delay","timer","args","clearTimeout","setTimeout","formParticipants","totalAmount","outGoingRes","getUserById","total","Dinero","prevParticipantsNum","setPrevParticipantsNum","prevTotalAmount","setPrevTotalAmount","allocate","Array","fill","toJSON","getPrecision","inputValues","setInputValues","balanceSplitAmount","changingIdx","newVal","diff","each","res","Grid","container","direction","eachParticipants","item","xs","spacing","Slider","value","onChange","min","max","valueLabelDisplay","Input","onBlur","inputProps","LightTooltip","withStyles","theme","tooltip","palette","common","white","boxShadow","shadows","fontSize","Tooltip","messageOnHover","title","Help","AddBillForm","watch","control","unregister","showAddBillForm","setShowAddBillForm","showUnevenlySplit","formAmount","unevenlyRes","setUnevenlyRes","Add","addBillForm","unevenly","forEach","FormControl","InputLabel","as","Select","labelId","MenuItem","defaultValue","rules","FormHelperText","message","label","step","pattern","multiple","moment","format","FormControlLabel","labelPlacement","render","Switch","checked","aria-labelledby","preventDefault","confirmMessage","onClickConfirmDeleteButton","confirmTapping","setConfirmTapping","showModal","setShowModal","closeModal","flexDirection","fontWeight","OutlinedInput","autoFocus","disabled","marginTop","useStyles","makeStyles","root","flexWrap","ParticipantCell","data","Chip","OneTableRow","rowData","prototype","PropTypes","array","isRequired","minWidth","BillDisplay","getNameById","toFormat","SummaryDisplay","summary","merged","from","to","Archive","bool","useSummary","m","Map","bill","len","JSON","stringify","subtract","has","set","get","add","parse","getAmount","push","record","payerList","receiverList","sort","a","b","SummaryBoard","setMerged","sortState","setSortState","filterFns","compose","oriSummary","payerListCopy","receiverListCopy","curPayer","pop","curReceiver","Math","abs","styles","tools","select","switchGroup","Checkbox","nextColor","COLOR_LIST","next","options","legend","labels","generateLabels","chart","datasets","eachSet","concat","text","fillStyle","tooltips","bodyFontSize","callbacks","tooltipItem","datasetIndex","index","renderData","borderColor","borderWidth","hoverBackgroundColor","BillPanel","tabIdx","setTabIdx","Tabs","newIdx","indicatorColor","Tab","Layout","sm","App","Boolean","location","hostname","match","configureStore","reducer","userReducer","billReducer","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","catch","console"],"mappings":"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","file":"static/js/main.d72e7613.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"UserBoard_item__37cEp\",\"addUserForm\":\"UserBoard_addUserForm__3Lc7h\",\"formBtnGroup\":\"UserBoard_formBtnGroup__3pHvk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBillForm\":\"AddBillForm_addBillForm__2mxAH\"};","import React from 'react';\nimport { Paper } from '@material-ui/core';\n\nconst PanelContainer = (props) => {\n    return (\n        <Paper\n            elevation={3}\n            style={{\n                margin: '10px',\n                padding: '10px',\n                overflow: 'auto',\n                ...props.style,\n            }}\n            data-testid=\"layoutContainerItem\"\n        >\n            {props.children}\n        </Paper>\n    );\n};\n\nexport default React.memo(PanelContainer);\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst userSlice = createSlice({\n    name: 'userSlice',\n    initialState: {\n        allUsers: [\n            { id: 'userId1', name: 'TEST_NAME1' },\n            { id: 'userId2', name: 'TEST_NAME2' },\n            { id: 'userId3', name: 'TEST_NAME3' },\n            { id: 'userId4', name: 'TEST_NAME4' },\n            { id: 'userId5', name: 'TEST_NAME5' },\n            { id: 'userId6', name: 'TEST_NAME6' },\n        ],\n    },\n\n    reducers: {\n        addUser: (state, action) => {\n            return {\n                ...state,\n                allUsers: [...state.allUsers, action.payload],\n            };\n        },\n        removeUser: (state, action) => {\n            return {\n                ...state,\n                allUsers: state.allUsers.filter((e) => e.id !== action.payload),\n            };\n        },\n    },\n});\n\nexport const { addUser, removeUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Paper } from '@material-ui/core';\n\nconst Styles = {\n    background: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: '10',\n        overflow: 'auto',\n    },\n    contentWrapper: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '10px',\n        width: '40%',\n        backgroundColor: 'rgb(255, 255, 255)',\n    },\n};\n\nconst ModalBox = (props) => {\n    return (\n        <div\n            id=\"modalBox-background\"\n            style={Styles.background}\n            onClick={(e) => {\n                if (e.target.id === 'modalBox-background')\n                    props.onClickBackground();\n            }}\n        >\n            <Paper style={{ ...Styles.contentWrapper, ...props.style }}>\n                {props.children}\n            </Paper>\n        </div>\n    );\n};\n\nModalBox.propTypes = {\n    onClickBackground: PropTypes.func.isRequired,\n    style: PropTypes.object,\n};\n\nexport default React.memo(ModalBox);\n","import React, { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addUser } from '../../slice/userSlice';\n\nimport { v4 as uuidV4 } from 'uuid';\nimport { Button, TextField, IconButton } from '@material-ui/core';\nimport { PersonAdd, Close, Check } from '@material-ui/icons';\n\nimport { useForm } from 'react-hook-form';\n\nimport ModalBox from '../ContentContainers/ModalBox';\nimport Styles from './UserBoard.module.css';\n\nconst AddNewUser = () => {\n    const [showAddUserForm, setShowAddUserForm] = useState(false);\n    const { allUsers } = useSelector((state) => state.Users);\n    const dispatch = useDispatch();\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <>\n            {/* add new user */}\n            <Button\n                color=\"primary\"\n                onClick={() => {\n                    setShowAddUserForm(true);\n                }}\n                startIcon={<PersonAdd />}\n            >\n                New User\n            </Button>\n            {showAddUserForm && (\n                <ModalBox\n                    onClickBackground={() => {\n                        setShowAddUserForm(false);\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <h2>ADD NEW USER</h2>\n                        <IconButton\n                            onClick={() => {\n                                setShowAddUserForm(false);\n                            }}\n                        >\n                            <Close />\n                        </IconButton>\n                    </div>\n                    <form\n                        className={Styles.addUserForm}\n                        onSubmit={handleSubmit((e) => {\n                            dispatch(\n                                addUser({\n                                    id: uuidV4(),\n                                    name: e.newName.toUpperCase(),\n                                })\n                            );\n                            setShowAddUserForm(false);\n                        })}\n                    >\n                        <TextField\n                            type=\"text\"\n                            name=\"newName\"\n                            placeholder=\"Enter a new name\"\n                            inputRef={register({\n                                required: true,\n                                validate: {\n                                    notHaveSameName: (val) => {\n                                        let newName = val.toUpperCase();\n                                        return !allUsers.reduce((acc, cur) => {\n                                            if (acc) return true;\n                                            else return cur.name === newName;\n                                        }, false);\n                                    },\n                                },\n                            })}\n                            error={!!errors.newName}\n                            helperText={\n                                !!errors.newName\n                                    ? errors.newName.type === 'required'\n                                        ? 'Name is required'\n                                        : errors.newName.type ===\n                                          'notHaveSameName'\n                                        ? 'Same name exist'\n                                        : ''\n                                    : ''\n                            }\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            endIcon={<Check />}\n                        >\n                            Confirm\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => setShowAddUserForm(false)}\n                        >\n                            cancel\n                        </Button>\n                    </form>\n                </ModalBox>\n            )}\n        </>\n    );\n};\n\nexport default AddNewUser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n} from '@material-ui/core';\nconst TableDisplay = ({ headers, tableContent }) => {\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"table\">\n                <TableHead>\n                    <TableRow>\n                        {headers.map((eachHead, idx) => (\n                            <TableCell align=\"center\" key={idx}>\n                                {eachHead}\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tableContent.map((row, idx) => (\n                        <TableRow key={idx}>\n                            {row.map((e, i) => (\n                                <TableCell align=\"center\" key={i}>\n                                    {e}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nTableDisplay.propTypes = {\n    headers: PropTypes.array.isRequired,\n    tableContent: PropTypes.array.isRequired,\n};\n\nexport default TableDisplay;\n","import React, { useMemo, useRef, useEffect } from 'react';\nimport { removeUser } from '../../slice/userSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nimport AddNewUser from './AddNewUser';\nimport TableDisplay from '../ContentContainers/TableDisplay';\n\nfunction UserBoard() {\n    const { allUsers } = useSelector((state) => state.Users);\n    const { allBills } = useSelector((state) => state.Bills);\n    const dispatch = useDispatch();\n\n    // solve snapshot problem\n    const billRef = useRef(allBills);\n\n    const tableContent = useMemo(() => {\n        return allUsers.map((e) => {\n            let { id, name } = e;\n            return [\n                name,\n                <IconButton\n                    color=\"secondary\"\n                    onClick={() => {\n                        // solve snapshot problem (allBills ==> ref.current)\n                        let userInBill = billRef.current.reduce((acc, cur) => {\n                            if (acc) return true;\n                            else\n                                return (\n                                    cur.payer === id ||\n                                    cur.participants.includes(id)\n                                );\n                        }, false);\n                        if (userInBill)\n                            alert('User still in a BILL. Cannot delete');\n                        else {\n                            if (window.confirm('Want delete this user?'))\n                                dispatch(removeUser(id));\n                        }\n                    }}\n                >\n                    <Delete />\n                </IconButton>,\n            ];\n        });\n    }, [allUsers, dispatch]);\n\n    // solve snapshot problem\n    useEffect(() => {\n        billRef.current = allBills;\n    });\n\n    return (\n        <div>\n            <AddNewUser />\n            {/* show user list */}\n            {tableContent.length !== 0 ? (\n                <TableDisplay\n                    tableContent={tableContent}\n                    headers={['name', '']}\n                />\n            ) : (\n                <h2>no user</h2>\n            )}\n        </div>\n    );\n}\n\nexport default UserBoard;\n","import React from 'react';\nimport PanelContainer from '../ContentContainers/PanelContainer';\nimport UserBoard from '../User/UserBoard';\n\nexport default function UserPanel() {\n    return (\n        <PanelContainer style={{ height: '100vh' }}>\n            <UserBoard />\n        </PanelContainer>\n    );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst billSlice = createSlice({\n    name: 'billSlice',\n    initialState: {\n        allBills: [\n            {\n                id: 'bill1',\n                payer: 'userId1',\n                amount: { amount: 10000, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId2'],\n                date: '2020-04-20',\n            },\n            {\n                id: 'bill2',\n                payer: 'userId2',\n                amount: { amount: 40000, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId2', 'userId3'],\n                date: '2020-01-01',\n            },\n            {\n                id: 'bill3',\n                payer: 'userId3',\n                amount: { amount: 50030, currency: 'USD', precision: 2 },\n                participants: ['userId3', 'userId2'],\n                date: '2020-02-05',\n            },\n            {\n                id: 'bill4',\n                payer: 'userId4',\n                amount: { amount: 20045, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId5'],\n                date: '2020-02-09',\n            },\n            {\n                id: 'bill5',\n                payer: 'userId2',\n                amount: { amount: 10072, currency: 'USD', precision: 2 },\n                participants: ['userId5'],\n                date: '2019-12-05',\n            },\n            {\n                id: 'bill6',\n                payer: 'userId3',\n                amount: { amount: 7063, currency: 'USD', precision: 2 },\n                participants: [\n                    'userId1',\n                    'userId2',\n                    'userId3',\n                    'userId4',\n                    'userId5',\n                ],\n                date: '2019-12-05',\n            },\n        ],\n    },\n\n    reducers: {\n        addBill: (state, action) => {\n            return {\n                ...state,\n                allBills: [action.payload, ...state.allBills],\n            };\n        },\n        removeBill: (state, action) => {\n            return {\n                ...state,\n                allBills: state.allBills.filter((e) => e.id !== action.payload),\n            };\n        },\n    },\n});\n\nexport const { addBill, removeBill } = billSlice.actions;\n\nexport default billSlice.reducer;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useUserName = () => {\n    const { allUsers } = useSelector((state) => state.Users);\n    const id_name_map = useMemo(() => {\n        // console.log('new map');\n        return allUsers.reduce((acc, cur) => {\n            acc[cur.id] = cur.name;\n            return acc;\n        }, {});\n    }, [allUsers]);\n    return (id) => id_name_map[id];\n};\n// import { useEffect, useRef } from 'react';\n// import { useSelector } from 'react-redux';\n\n// export const useUserName = () => {\n//     const { allUsers } = useSelector((state) => state.Users);\n//     const ref = useRef();\n\n//     useEffect(() => {\n//         const id_name_map = allUsers.reduce((acc, cur) => {\n//             acc[cur.id] = cur.name;\n//             return acc;\n//         }, {});\n//         ref.current = (id) => id_name_map[id];\n//     }, [allUsers]);\n\n//     if (!ref.current) return (id) => id;\n//     return ref.current;\n// };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Grid, Slider, Input } from '@material-ui/core';\nimport { useUserName } from '../../hooks/useUserName';\n\nimport Dinero from 'dinero.js';\n\nconst throttle = (fn, delay) => {\n    let timer = null;\n    return (...args) => {\n        if (timer !== null) return;\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            fn(...args);\n        }, delay);\n    };\n};\n\nfunction MultiLineSlider({ formParticipants, totalAmount, outGoingRes }) {\n    const getUserById = useUserName();\n\n    const total = Dinero({\n        amount: +totalAmount * 100,\n        currency: 'USD',\n        precision: 2,\n    });\n\n    const [prevParticipantsNum, setPrevParticipantsNum] = useState(0);\n\n    const [prevTotalAmount, setPrevTotalAmount] = useState(-10);\n\n    const [inputValues, setInputValues] = useState(\n        total\n            .allocate(new Array(formParticipants.length).fill(1))\n            .map((e) => e.toJSON().amount / 10 ** total.getPrecision())\n    );\n\n    if (\n        prevParticipantsNum !== formParticipants.length ||\n        prevTotalAmount !== totalAmount\n    ) {\n        setInputValues(\n            total\n                .allocate(new Array(formParticipants.length).fill(1))\n                .map((e) => e.toJSON().amount / 10 ** total.getPrecision())\n        );\n        setPrevParticipantsNum(formParticipants.length);\n        setPrevTotalAmount(totalAmount);\n    }\n\n    useEffect(() => {\n        outGoingRes(inputValues);\n    });\n\n    const balanceSplitAmount = (changingIdx, newVal) => {\n        let diff =\n            inputValues.reduce((acc, cur, idx) => {\n                if (idx === changingIdx) {\n                    return acc + newVal;\n                } else {\n                    return acc + cur;\n                }\n            }, 0) - totalAmount;\n\n        if (diff <= 0) {\n            setInputValues(\n                inputValues.map((each, i) =>\n                    i === changingIdx ? newVal : each\n                )\n            );\n        } else {\n            setInputValues(\n                inputValues.map((each, i) => {\n                    if (i !== changingIdx) {\n                        if (each >= diff) {\n                            let res = each - diff;\n                            diff = 0;\n                            return res;\n                        } else {\n                            diff = diff - each;\n                            return 0;\n                        }\n                    } else return newVal;\n                })\n            );\n        }\n    };\n\n    return (\n        <Grid container direction=\"column\" style={{ alignItems: 'center' }}>\n            {formParticipants.map((eachParticipants, idx) => (\n                <Grid key={idx} container item xs spacing={2}>\n                    <Grid item>{getUserById(eachParticipants)}</Grid>\n                    <Grid item xs>\n                        <Slider\n                            value={inputValues[idx]}\n                            onChange={throttle(\n                                (e, newVal) => balanceSplitAmount(idx, +newVal),\n                                50\n                            )}\n                            min={0}\n                            max={+totalAmount}\n                            // step={10 ** -total.getPrecision()}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Input\n                            value={inputValues[idx]}\n                            onChange={(e) => {\n                                e.target.value === ''\n                                    ? balanceSplitAmount(idx, 0)\n                                    : balanceSplitAmount(idx, +e.target.value);\n                            }}\n                            onBlur={(e) => {\n                                if (+e.target.value < 0)\n                                    balanceSplitAmount(idx, 0);\n                                if (+e.target.value > totalAmount)\n                                    balanceSplitAmount(idx, totalAmount);\n                            }}\n                            inputProps={{\n                                // step: 10,\n                                min: 0,\n                                max: totalAmount,\n                                type: 'number',\n                                // 'aria-labelledby': 'input-slider',\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}\n\nMultiLineSlider.propTypes = {\n    formParticipants: PropTypes.array,\n    totalAmount: PropTypes.number,\n    outGoingRes: PropTypes.func,\n};\n\nexport default React.memo(MultiLineSlider);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Help } from '@material-ui/icons';\n\nconst LightTooltip = withStyles((theme) => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n    },\n}))(Tooltip);\n\nconst HoverHelpWidget = ({ messageOnHover, onClick = () => {} }) => {\n    return (\n        <>\n            <LightTooltip\n                title={messageOnHover}\n                onClick={() => {\n                    onClick();\n                }}\n            >\n                <Help color=\"primary\" fontSize=\"small\" />\n            </LightTooltip>\n        </>\n    );\n};\n\nHoverHelpWidget.propTypes = {\n    messageOnHover: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n        .isRequired,\n    onClick: PropTypes.func,\n};\n\nexport default React.memo(HoverHelpWidget);\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addBill } from '../../slice/billSlice';\n\nimport { useForm, Controller } from 'react-hook-form';\nimport moment from 'moment';\nimport { v4 as uuidV4 } from 'uuid';\n\nimport {\n    Button,\n    IconButton,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    FormHelperText,\n    TextField,\n    Select,\n    MenuItem,\n    Switch,\n} from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons/';\nimport Styles from './AddBillForm.module.css';\nimport MultiLineSlider from './MultiLineSlider';\nimport ModalBox from '../ContentContainers/ModalBox';\nimport HoverHelpWidget from '../widgets/HoverHelpWidget';\n\nconst AddBillForm = () => {\n    const { allUsers } = useSelector((state) => state.Users);\n\n    const dispatch = useDispatch();\n\n    const {\n        handleSubmit,\n        register,\n        watch,\n        errors,\n        control,\n        unregister,\n    } = useForm();\n\n    const [showAddBillForm, setShowAddBillForm] = useState(false);\n\n    const showUnevenlySplit = watch('unevenly');\n    const formParticipants = watch('participants', []);\n    const formAmount = watch('amount', 0);\n\n    const [unevenlyRes, setUnevenlyRes] = useState([]);\n\n    // useEffect(() => {\n    //     return () => {\n    //         unregister();\n    //     };\n    // });\n\n    return (\n        <div>\n            <Button\n                color=\"primary\"\n                onClick={() => setShowAddBillForm(true)}\n                data-testid=\"add-new-bill-btn\"\n                startIcon={<Add />}\n            >\n                Add New Bills\n            </Button>\n            {showAddBillForm && (\n                <ModalBox\n                    onClickBackground={() => {\n                        setShowAddBillForm(false);\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <div\n                            style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                            }}\n                        >\n                            <h2>ADD NEW BILL </h2>\n                            <HoverHelpWidget\n                                messageOnHover={\n                                    <div>\n                                        <p>\n                                            Payer is who actual spend the money\n                                        </p>\n                                        <p>\n                                            Participant(s) are those split this\n                                            bill\n                                        </p>\n                                        <p>Do not forgot yourself</p>\n                                    </div>\n                                }\n                            />\n                        </div>\n                        <IconButton\n                            onClick={() => {\n                                setShowAddBillForm(false);\n                            }}\n                        >\n                            <Close />\n                        </IconButton>\n                    </div>\n                    <form\n                        data-testid=\"add-new-bill-form\"\n                        className={Styles.addBillForm}\n                        onSubmit={handleSubmit((e) => {\n                            if (!e.unevenly) {\n                                dispatch(\n                                    addBill({\n                                        id: uuidV4(),\n                                        payer: e.payer,\n                                        amount: {\n                                            amount: +e.amount * 100,\n                                            currency: 'USD',\n                                            precision: 2,\n                                        },\n                                        participants: e.participants,\n                                        date: e.date,\n                                    })\n                                );\n                            } else {\n                                e.participants.forEach((each, idx) => {\n                                    dispatch(\n                                        addBill({\n                                            id: uuidV4(),\n                                            payer: e.payer,\n                                            amount: {\n                                                amount: +unevenlyRes[idx] * 100,\n                                                currency: 'USD',\n                                                precision: 2,\n                                            },\n                                            participants: [each],\n                                            date: e.date,\n                                        })\n                                    );\n                                });\n                            }\n                            setShowAddBillForm(false);\n                        })}\n                    >\n                        {/* payer */}\n                        <FormControl error={!!errors.payer}>\n                            <InputLabel id=\"Payer_label\">Payer</InputLabel>\n                            <Controller\n                                as={\n                                    <Select labelId=\"Payer_label\" value=\"\">\n                                        {allUsers.map((e) => (\n                                            <MenuItem key={e.id} value={e.id}>\n                                                {e.name}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                }\n                                name=\"payer\"\n                                defaultValue=\"\"\n                                control={control}\n                                rules={{ required: 'Select one payer' }}\n                            />\n                            <FormHelperText>\n                                {!!errors.payer && errors.payer.message}\n                            </FormHelperText>\n                        </FormControl>\n                        {/* amount */}\n                        <TextField\n                            data-testid=\"add-bill-amount\"\n                            label=\"Amount\"\n                            name=\"amount\"\n                            type=\"number\"\n                            inputProps={{ step: '0.01' }}\n                            inputRef={register({\n                                required: 'Need amount',\n                                pattern: {\n                                    value: /^(\\d{1,15}|\\d{0,15}\\.\\d{1,2}|.)$/,\n                                    message: 'amount number not valid',\n                                },\n                            })}\n                            error={!!errors.amount}\n                            helperText={\n                                !!errors.amount && errors.amount.message\n                            }\n                        />\n                        {/* Participant */}\n                        <FormControl error={!!errors.participants}>\n                            <InputLabel id=\"test\"> Participant(s) </InputLabel>\n                            <Controller\n                                as={\n                                    <Select multiple labelId=\"test\">\n                                        {allUsers.map((e) => (\n                                            <MenuItem key={e.id} value={e.id}>\n                                                {e.name}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                }\n                                name=\"participants\"\n                                defaultValue={[]}\n                                control={control}\n                                rules={{\n                                    required: true,\n                                    validate: (value) =>\n                                        value.length > 0 ||\n                                        'At least one participant',\n                                }}\n                            />\n                            <FormHelperText>\n                                {!!errors.participants &&\n                                    errors.participants.message}\n                            </FormHelperText>\n                        </FormControl>\n                        {/* dates */}\n                        <TextField\n                            label=\"date\"\n                            type=\"date\"\n                            inputRef={register({ required: 'date required' })}\n                            name=\"date\"\n                            defaultValue={moment().format('YYYY-MM-DD')}\n                            error={!!errors.date}\n                            helperText={!!errors.date && errors.date.message}\n                        />\n\n                        {/* show unevenly split */}\n                        <FormControlLabel\n                            labelPlacement=\"start\"\n                            label=\"Unevenly split\"\n                            control={\n                                <Controller\n                                    render={(props) => (\n                                        <Switch\n                                            checked={props.value}\n                                            onChange={(e) =>\n                                                props.onChange(e.target.checked)\n                                            }\n                                            color=\"primary\"\n                                            aria-labelledby=\"open-unevenly\"\n                                        />\n                                    )}\n                                    name=\"unevenly\"\n                                    defaultValue={false}\n                                    control={control}\n                                />\n                            }\n                        />\n\n                        {showUnevenlySplit &&\n                            !!formParticipants.length &&\n                            !!formAmount && (\n                                <MultiLineSlider\n                                    formParticipants={formParticipants}\n                                    totalAmount={+formAmount}\n                                    outGoingRes={setUnevenlyRes}\n                                />\n                            )}\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            data-testid=\"submit-btn\"\n                        >\n                            Confirm\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                setShowAddBillForm(false);\n                            }}\n                            data-testid=\"cancel-btn\"\n                        >\n                            Cancel\n                        </Button>\n                    </form>\n                </ModalBox>\n            )}\n        </div>\n    );\n};\n\nexport default AddBillForm;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalBox from '../ContentContainers/ModalBox';\nimport { Button, IconButton, OutlinedInput } from '@material-ui/core';\nimport { Delete, Close } from '@material-ui/icons';\n\nconst DeleteBtnWithConfirmModal = ({\n    title = '',\n    confirmMessage,\n    onClickConfirmDeleteButton,\n}) => {\n    const [confirmTapping, setConfirmTapping] = useState('');\n\n    const [showModal, setShowModal] = useState(false);\n\n    const closeModal = () => {\n        setConfirmTapping('');\n        setShowModal(false);\n    };\n\n    return (\n        <div>\n            <IconButton\n                color=\"secondary\"\n                onClick={() => {\n                    setShowModal(true);\n                }}\n            >\n                <Delete />\n            </IconButton>\n\n            {showModal && (\n                <ModalBox\n                    onClickBackground={() => closeModal()}\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        padding: '20px',\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <h2>{title}</h2>\n                        <IconButton\n                            onClick={() => closeModal()}\n                            // style={{ alignSelf: 'flex-end' }}\n                        >\n                            <Close />\n                        </IconButton>\n                    </div>\n                    <p style={{ margin: '10px 0', fontSize: '20px' }}>\n                        Please type\n                        <span style={{ fontWeight: 'bold' }}>\n                            {' '}\n                            {confirmMessage}{' '}\n                        </span>\n                        to confirm.\n                    </p>\n                    <OutlinedInput\n                        id=\"component-outlined\"\n                        placeholder=\"Confirm\"\n                        value={confirmTapping}\n                        onChange={(e) => {\n                            setConfirmTapping(e.target.value);\n                        }}\n                        autoFocus\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={confirmMessage !== confirmTapping}\n                        style={{ marginTop: '10px' }}\n                        onClick={() => {\n                            onClickConfirmDeleteButton();\n                            closeModal();\n                        }}\n                    >\n                        Delete\n                    </Button>\n                </ModalBox>\n            )}\n        </div>\n    );\n};\n\nDeleteBtnWithConfirmModal.propTypes = {\n    title: PropTypes.string,\n    confirmMessage: PropTypes.string.isRequired,\n    onClickConfirmDeleteButton: PropTypes.func.isRequired,\n};\n\nexport default React.memo(DeleteBtnWithConfirmModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { removeBill } from '../../slice/billSlice';\n\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Chip,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteBtnConfirmModal from '../widgets/DeleteBtnWithConfirmModal';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n    },\n}));\n\nconst ParticipantCell = ({ data }) => {\n    return (\n        <div className={useStyles().root}>\n            {data.map((e, idx) => (\n                <Chip key={idx} label={e} variant=\"outlined\" color=\"primary\" />\n            ))}\n        </div>\n    );\n};\n\nconst OneTableRow = ({ rowData }) => {\n    const dispatch = useDispatch();\n    return (\n        <>\n            <TableRow data-testid=\"billItem\">\n                <TableCell align=\"center\">{rowData.payer}</TableCell>\n                <TableCell align=\"center\">{rowData.amount}</TableCell>\n                <TableCell align=\"center\" style={{ width: '40%' }}>\n                    <ParticipantCell data={rowData.participants} />\n                </TableCell>\n                <TableCell align=\"center\">{rowData.date}</TableCell>\n                <TableCell align=\"center\">\n                    <DeleteBtnConfirmModal\n                        title=\"Do you want Delete this Bill?\"\n                        confirmMessage=\"123\"\n                        onClickConfirmDeleteButton={() => {\n                            dispatch(removeBill(rowData.id));\n                        }}\n                    />\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nconst BillTableDisplay = ({ tableContent }) => {\n    return (\n        <TableContainer component={Paper}>\n            <Table style={{ minWidth: '500px' }} aria-label=\"bill-table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"center\">Who Paid</TableCell>\n                        <TableCell align=\"center\">Amount</TableCell>\n                        <TableCell align=\"center\">Participant(s)</TableCell>\n                        <TableCell align=\"center\">Date</TableCell>\n                        <TableCell align=\"center\"></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tableContent.map((row, idx) => (\n                        <OneTableRow rowData={row} key={idx}></OneTableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nParticipantCell.prototype = {\n    data: PropTypes.array.isRequired,\n};\n\nOneTableRow.propTypes = {\n    rowData: PropTypes.object.isRequired,\n};\n\nBillTableDisplay.propTypes = {\n    tableContent: PropTypes.array.isRequired,\n};\n\nexport default React.memo(BillTableDisplay);\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Dinero from 'dinero.js';\nimport { useUserName } from '../../hooks/useUserName';\n\nimport BillTableDisplay from './BillTableDisplay';\nimport AddBillForm from './AddBillForm';\n\nconst BillDisplay = () => {\n    const { allBills } = useSelector((state) => state.Bills);\n    const getNameById = useUserName();\n\n    const tableContent = useMemo(() => {\n        return allBills.map((e) => {\n            return {\n                id: e.id,\n                payer: getNameById(e.payer),\n                amount: Dinero(e.amount).toFormat(),\n                participants: e.participants.map((e) => getNameById(e)),\n                date: e.date,\n            };\n        });\n    }, [allBills, getNameById]);\n\n    return (\n        <div>\n            {tableContent.length !== 0 ? (\n                <BillTableDisplay tableContent={tableContent} />\n            ) : (\n                <>\n                    <h2>Add new Bill</h2>\n                    <AddBillForm />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default BillDisplay;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { addBill } from '../../slice/billSlice';\nimport { v4 as uuidV4 } from 'uuid';\nimport moment from 'moment';\n\nimport { Archive } from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\n\nimport TableDisplay from '../ContentContainers/TableDisplay';\nimport { useUserName } from '../../hooks/useUserName';\n\nconst SummaryDisplay = ({ summary, merged }) => {\n    // get name hook\n    const getNameById = useUserName();\n    const dispatch = useDispatch();\n\n    const tableContent = useMemo(() => {\n        if (merged) {\n            return summary.map((e) => {\n                return [\n                    getNameById(e.from) + '---->' + getNameById(e.to),\n                    e.amount.toFormat(),\n                ];\n            });\n        } else {\n            return summary.map((e) => {\n                return [\n                    getNameById(e.from) + '---->' + getNameById(e.to),\n                    e.amount.toFormat(),\n                    <IconButton\n                        color=\"primary\"\n                        onClick={() => {\n                            dispatch(\n                                addBill({\n                                    id: uuidV4(),\n                                    payer: e.from,\n                                    amount: e.amount.toJSON(),\n                                    participants: [e.to],\n                                    date: moment().format('YYYY-MM-DD'),\n                                })\n                            );\n                        }}\n                    >\n                        <Archive />\n                    </IconButton>,\n                ];\n            });\n        }\n    }, [summary, merged, dispatch, getNameById]);\n\n    return (\n        <div>\n            {tableContent.length !== 0 ? (\n                <>\n                    {merged ? (\n                        <TableDisplay\n                            tableContent={tableContent}\n                            headers={['Transform', 'Amount']}\n                        />\n                    ) : (\n                        <TableDisplay\n                            tableContent={tableContent}\n                            headers={['Transform', 'Amount', '']}\n                        />\n                    )}\n                </>\n            ) : (\n                <h2> Bill All Set </h2>\n            )}\n        </div>\n    );\n};\n\nSummaryDisplay.prototype = {\n    summary: PropTypes.array,\n    merged: PropTypes.bool,\n};\n\nexport default React.memo(SummaryDisplay);\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Dinero from 'dinero.js';\n\nconst useSummary = () => {\n    const { allBills } = useSelector((state) => state.Bills);\n    const summary = useMemo(() => {\n        let m = new Map();\n        for (let bill of allBills) {\n            let oriCurrency = Dinero(bill.amount);\n            let allocate = oriCurrency.allocate(\n                Array(bill.participants.length).fill(1)\n            );\n            for (let i = 0, len = bill.participants.length; i < len; ++i) {\n                if (bill.participants[i] !== bill.payer) {\n                    let from = bill.participants[i],\n                        to = bill.payer,\n                        amount = allocate[i],\n                        key = '';\n                    if (from < to) {\n                        key = JSON.stringify([from, to]);\n                    } else {\n                        key = JSON.stringify([to, from]);\n                        amount = Dinero({ amount: 0 }).subtract(amount);\n                    }\n                    if (!m.has(key)) m.set(key, amount);\n                    else {\n                        m.set(key, m.get(key).add(amount));\n                    }\n                }\n            }\n\n            // m.forEach((val, key) => {\n            //     console.log(key, val.getAmount());\n            // });\n        }\n        // analysis map\n        let res = [];\n        m.forEach((val, key) => {\n            let [from, to] = JSON.parse(key);\n            if (val.getAmount() > 0) {\n                res.push({\n                    from,\n                    to,\n                    amount: val,\n                });\n            } else if (val.getAmount() === 0) {\n                return;\n            } else {\n                res.push({\n                    from: to,\n                    to: from,\n                    amount: Dinero({ amount: 0 }).subtract(val),\n                });\n            }\n        });\n\n        return res;\n    }, [allBills]);\n\n    const [payerList, receiverList] = useMemo(() => {\n        let record = {};\n\n        for (let each of summary) {\n            record[each.from] = 0;\n            record[each.to] = 0;\n        }\n\n        for (let each of summary) {\n            if (each.amount.getAmount() > 0) {\n                record[each.from] -= each.amount.getAmount();\n                record[each.to] += each.amount.getAmount();\n            } else {\n                // < 0 (not == 0)\n                record[each.from] += each.amount.getAmount();\n                record[each.to] -= each.amount.getAmount();\n            }\n        }\n\n        let payerList = [],\n            receiverList = [];\n        for (let each in record) {\n            if (record[each] < 0) {\n                payerList.push([each, record[each]]);\n            } else if (record[each] > 0) {\n                receiverList.push([each, record[each]]);\n            } else {\n                // record[each] == 0\n                continue;\n            }\n        }\n        // sort two list\n        payerList.sort((a, b) => a[1] - b[1]);\n        receiverList.sort((a, b) => b[1] - a[1]);\n\n        return [payerList, receiverList];\n    }, [summary]);\n\n    return [summary, payerList, receiverList];\n};\n\nexport default useSummary;\n","import React, { useState } from 'react';\n\nimport Dinero from 'dinero.js';\nimport SummaryDisplay from './SummaryDisplay';\n\nimport { TextField, MenuItem, Checkbox } from '@material-ui/core';\nimport styles from './SummaryBoard.module.css';\n\nimport useSummary from '../../hooks/useSummary';\n\n// compose(f1, f2, f3)(val) === f3(f2(f1(val)))\nconst compose = (...fn) =>\n    fn.reduce(\n        (acc, cur) => (...args) => cur(acc(...args)),\n        (val) => val\n    );\n\nconst SummaryBoard = () => {\n    const [summary, payerList, receiverList] = useSummary();\n\n    const [merged, setMerged] = useState(false);\n    const [sortState, setSortState] = useState(0);\n\n    const sortSummary = (oriSummary) => {\n        if (sortState === 0) {\n            oriSummary.sort((a, b) => {\n                if (a.from < b.from) return -1;\n                else return 1;\n            });\n        }\n        if (sortState === 1) {\n            oriSummary.sort((a, b) => {\n                if (a.to < b.to) return -1;\n                else return 1;\n            });\n        }\n        if (sortState === 2) {\n            oriSummary.sort(\n                (a, b) => a.amount.getAmount() - b.amount.getAmount()\n            );\n        }\n        if (sortState === 3) {\n            oriSummary.sort(\n                (a, b) => b.amount.getAmount() - a.amount.getAmount()\n            );\n        }\n        return [...oriSummary];\n    };\n    const mergeSummary = (oriSummary) => {\n        if (!merged) {\n            return oriSummary;\n        }\n\n        // Greedy method to calculate a relative less transaction\n        let res = [];\n        let payerListCopy = payerList.map((e) => [...e]),\n            receiverListCopy = receiverList.map((e) => [...e]);\n        while (payerListCopy.length !== 0) {\n            let curPayer = payerListCopy.pop();\n            while (curPayer[1] !== 0) {\n                // current payer still need pay somebody\n                let curReceiver = receiverListCopy.pop();\n                if (curReceiver[1] <= Math.abs(curPayer[1])) {\n                    res.push({\n                        from: curPayer[0],\n                        to: curReceiver[0],\n                        amount: Dinero({ amount: curReceiver[1] }),\n                    });\n                    curPayer[1] += curReceiver[1];\n                } else {\n                    res.push({\n                        from: curPayer[0],\n                        to: curReceiver[0],\n                        amount: Dinero({ amount: 0 - curPayer[1] }),\n                    });\n                    curReceiver[1] -= Math.abs(curPayer[1]);\n                    curPayer[1] = 0;\n                    receiverListCopy.push(curReceiver);\n                }\n            }\n        }\n        return res;\n    };\n\n    //compose filter function\n    const filterFns = compose(mergeSummary, sortSummary);\n    return (\n        <div>\n            {/* tool bar */}\n            <div className={styles.tools}>\n                <TextField\n                    select\n                    value={sortState}\n                    onChange={(e) => {\n                        setSortState(e.target.value);\n                    }}\n                    label=\"Arrangement\"\n                >\n                    <MenuItem value={0}>Group By Payer</MenuItem>\n                    <MenuItem value={1}>Group By Receiver</MenuItem>\n                    <MenuItem value={2}>Amount Increasing</MenuItem>\n                    <MenuItem value={3}>Amount Decreasing</MenuItem>\n                </TextField>\n                <div className={styles.switchGroup}>\n                    <Checkbox\n                        checked={merged}\n                        onChange={(e) => {\n                            setMerged(e.target.checked);\n                        }}\n                        color=\"primary\"\n                        name=\"Merge\"\n                    />\n                    <span>Merged Bills Summary</span>\n                </div>\n            </div>\n\n            <SummaryDisplay summary={filterFns(summary)} merged={merged} />\n        </div>\n    );\n};\n\nexport default SummaryBoard;\n","import React, { useMemo } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { useUserName } from '../../../hooks/useUserName';\n\nconst nextColor = (function () {\n    // console.log('next color fun');\n    const COLOR_LIST = [\n        '#efb4c1',\n        '#c8707e',\n        '#5aa08d',\n        '#e28fad',\n        '#e48e58',\n        '#f0c7ab',\n        '#edaa7d',\n        '#a8c879',\n        '#678fae',\n        '#ac99c1',\n        '#96b1d0',\n        '#ada759',\n        '#c08863',\n        '#4c92b1',\n        '#c8c2bd',\n    ];\n    let idx = 0;\n\n    return () => {\n        let next = COLOR_LIST[idx];\n        idx = (idx + 1) % COLOR_LIST.length;\n        return next;\n    };\n})();\nconst HOVER_COLOR = 'rgba(54, 162, 235, 0.6)';\nconst options = {\n    legend: {\n        position: 'left',\n\n        labels: {\n            fontSize: 20,\n\n            generateLabels: (chart) => {\n                let {\n                    data: { datasets },\n                } = chart;\n                let res = [];\n\n                datasets.forEach((eachSet) => {\n                    res = res.concat(\n                        eachSet.labels.map((e, idx) => {\n                            return {\n                                text: e,\n                                fillStyle: eachSet.backgroundColor[idx],\n                            };\n                        })\n                    );\n                });\n                return res;\n            },\n        },\n    },\n    tooltips: {\n        bodyFontSize: 20,\n        callbacks: {\n            label: (tooltipItem, data) => {\n                let label =\n                    data.datasets[tooltipItem.datasetIndex].labels[\n                        tooltipItem.index\n                    ];\n                let value =\n                    data.datasets[tooltipItem.datasetIndex].data[\n                        tooltipItem.index\n                    ];\n                return value < 0\n                    ? `${label} need spend $${-value}`\n                    : `${label} will receive $${value}`;\n            },\n        },\n    },\n};\n\nconst UserMoneyStatusPieChart = ({ payerList, receiverList }) => {\n    const getNameById = useUserName();\n\n    const renderData = useMemo(() => {\n        return {\n            datasets: [\n                {\n                    label: 'will receive',\n                    data: receiverList.map((e) => e[1] / 100),\n                    labels: receiverList.map((e) => getNameById(e[0])),\n                    backgroundColor: receiverList.map(() => nextColor()),\n                    borderColor: '#fff',\n                    borderWidth: 8,\n                    hoverBackgroundColor: HOVER_COLOR,\n                },\n                {\n                    label: 'need spend',\n                    data: payerList.map((e) => e[1] / 100),\n                    labels: payerList.map((e) => getNameById(e[0])),\n                    backgroundColor: payerList.map(() => nextColor()),\n                    borderColor: '#fff',\n                    borderWidth: 4,\n                    hoverBackgroundColor: HOVER_COLOR,\n                },\n            ],\n        };\n    }, [payerList, receiverList, getNameById]);\n\n    if (payerList.length === 0 || receiverList.length === 0) return <div></div>;\n\n    return (\n        <div data-testid=\"pieChart\">\n            <Pie data={renderData} options={options} />\n        </div>\n    );\n};\n\nexport default React.memo(UserMoneyStatusPieChart);\n","import React, { useState } from 'react';\nimport AddBillForm from '../Bill/AddBillForm';\nimport BillDisplay from '../Bill/BillDisplay';\nimport SummaryBoard from '../Summary/SummaryBoard';\nimport PanelContainer from '../ContentContainers/PanelContainer';\n\nimport { Tabs, Tab } from '@material-ui/core';\n\nimport PieChart from '../Summary/Charts/UserMoneyStatusPieChart';\nimport useSummary from '../../hooks/useSummary';\n\nexport default function BillPanel() {\n    const [, payerList, receiverList] = useSummary();\n\n    const [tabIdx, setTabIdx] = useState(0);\n\n    return (\n        <PanelContainer style={{ height: '100vh' }}>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                }}\n            >\n                <Tabs\n                    value={tabIdx}\n                    onChange={(e, newIdx) => setTabIdx(newIdx)}\n                    indicatorColor=\"primary\"\n                    aria-label=\"tabs\"\n                >\n                    <Tab label=\"bill Record\" />\n                    <Tab label=\"transition\" />\n                    <Tab label=\"summary\" />\n                </Tabs>\n                <AddBillForm />\n            </div>\n\n            <div style={{ display: tabIdx === 0 ? 'block' : 'none' }}>\n                <BillDisplay />\n            </div>\n            <div style={{ display: tabIdx === 1 ? 'block' : 'none' }}>\n                <SummaryBoard />\n            </div>\n            {tabIdx === 2 && (\n                <div>\n                    <PieChart\n                        payerList={payerList}\n                        receiverList={receiverList}\n                    />\n                </div>\n            )}\n        </PanelContainer>\n    );\n}\n","import React from 'react';\nimport UserPanel from './UserPanel';\nimport BillPanel from './BillPanel';\nimport { Grid } from '@material-ui/core';\n\nexport default function Layout() {\n    return (\n        <>\n            <Grid container>\n                <Grid item sm={9}>\n                    <BillPanel />\n                </Grid>\n                <Grid item sm={3}>\n                    <UserPanel />\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport billReducer from '../slice/billSlice';\nimport userReducer from '../slice/userSlice';\n\nexport default configureStore({\n    reducer: {\n        Users: userReducer,\n        Bills: billReducer,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <Provider store={store}>\n//             <App />\n//         </Provider>\n//     </React.StrictMode>,\n//     document.getElementById('root')\n// );\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tools\":\"SummaryBoard_tools__18hv4\",\"switchGroup\":\"SummaryBoard_switchGroup__3tzj3\"};"],"sourceRoot":""}