{"version":3,"sources":["components/Bill/AddBillForm.module.css","components/ContentContainers/PanelContainer.jsx","slice/userSlice.js","components/ContentContainers/CustomContainer.jsx","components/User/UserBoard.jsx","components/Layout/UserPanel.jsx","slice/billSlice.js","hooks/useUserName.jsx","components/Bill/MultiLineSlider.jsx","components/ContentContainers/ModalBox.jsx","components/Bill/AddBillForm.jsx","components/Bill/widget/DeleteBtnWithConfirmModal.jsx","components/Bill/widget/BillTableDisplay.jsx","components/Bill/BillDisplay.jsx","components/ContentContainers/TableDisplay.jsx","components/Summary/SummaryDisplay.jsx","hooks/useSummary.jsx","components/Summary/SummaryBoard.jsx","components/Summary/Charts/UserMoneyStatusPieChart.jsx","components/Layout/BillPanel.jsx","components/Layout/Layout.jsx","App.js","serviceWorker.js","app/store.js","index.js","components/User/UserBoard.module.css","components/Summary/SummaryBoard.module.css"],"names":["module","exports","React","memo","props","Paper","elevation","style","margin","padding","data-testid","children","userSlice","createSlice","name","initialState","allUsers","id","reducers","addUser","state","action","payload","removeUser","filter","e","actions","display","justifyContent","alignItems","height","useState","showAddUserForm","setShowAddUserForm","useSelector","Users","dispatch","useDispatch","useForm","register","handleSubmit","errors","className","Styles","addUserForm","onSubmit","uuidV4","newName","toUpperCase","TextField","type","placeholder","inputRef","required","error","helperText","formBtnGroup","Button","variant","color","endIcon","Check","onClick","unordered_list","map","key","IconButton","window","confirm","Delete","UserPanel","billSlice","allBills","payer","amount","currency","precision","participants","date","addBill","removeBill","useUserName","id_name_map","useMemo","reduce","acc","cur","throttle","fn","delay","timer","args","clearTimeout","setTimeout","formParticipants","totalAmount","outGoingRes","getUserById","total","Dinero","prevParticipantsNum","setPrevParticipantsNum","prevTotalAmount","setPrevTotalAmount","allocate","Array","length","fill","toJSON","getPrecision","inputValues","setInputValues","useEffect","balanceSplitAmount","changingIdx","newVal","diff","idx","each","i","res","Grid","container","direction","eachParticipants","item","xs","spacing","Slider","value","onChange","min","max","valueLabelDisplay","Input","target","onBlur","inputProps","background","position","width","top","left","backgroundColor","zIndex","overflow","contentWrapper","transform","onClickBackground","AddBillForm","watch","control","showAddBillForm","setShowAddBillForm","showUnevenlySplit","formAmount","unevenlyRes","setUnevenlyRes","startIcon","Add","Close","addBillForm","unevenly","forEach","FormControl","InputLabel","as","Select","labelId","MenuItem","defaultValue","rules","FormHelperText","message","label","step","pattern","multiple","validate","moment","format","FormControlLabel","labelPlacement","render","Switch","checked","aria-labelledby","preventDefault","confirmMessage","onClickConfirmDeleteButton","confirmTapping","setConfirmTapping","showModal","setShowModal","closeModal","flexDirection","alignSelf","Typography","fontWeight","OutlinedInput","disabled","marginTop","OneTableRow","rowData","TableRow","TableCell","align","tableData","TableContainer","component","Table","minWidth","aria-label","TableHead","TableBody","row","BillDisplay","Bills","getNameById","toFormat","TableDisplay","headers","eachHead","SummaryDisplay","summary","merged","from","to","Archive","prototype","PropTypes","array","bool","useSummary","m","Map","bill","len","JSON","stringify","subtract","has","set","get","add","val","parse","getAmount","push","record","payerList","receiverList","sort","a","b","SummaryBoard","setMerged","sortState","setSortState","filterFns","compose","oriSummary","payerListCopy","receiverListCopy","curPayer","pop","curReceiver","Math","abs","styles","tools","select","switchGroup","Checkbox","nextColor","COLOR_LIST","next","options","legend","labels","fontSize","generateLabels","chart","datasets","data","eachSet","concat","text","fillStyle","tooltips","bodyFontSize","callbacks","tooltipItem","datasetIndex","index","renderData","borderColor","borderWidth","hoverBackgroundColor","BillPanel","showChart","setShowChart","tabIdx","setTabIdx","Tabs","newIdx","indicatorColor","Tab","Layout","sm","App","Boolean","location","hostname","match","configureStore","reducer","userReducer","billReducer","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3be9b49b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBillForm\":\"AddBillForm_addBillForm__2mxAH\"};","import React from 'react';\nimport { Paper } from '@material-ui/core';\n\nconst PanelContainer = (props) => {\n    return (\n        <Paper\n            elevation={3}\n            style={{\n                margin: '10px',\n                padding: '10px',\n                ...props.style,\n            }}\n            data-testid=\"layoutContainerItem\"\n        >\n            {props.children}\n        </Paper>\n    );\n};\n\nexport default React.memo(PanelContainer);\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst userSlice = createSlice({\n    name: 'userSlice',\n    initialState: {\n        allUsers: [\n            { id: 'userId1', name: 'TEST_NAME1' },\n            { id: 'userId2', name: 'TEST_NAME2' },\n            { id: 'userId3', name: 'TEST_NAME3' },\n            { id: 'userId4', name: 'TEST_NAME4' },\n            { id: 'userId5', name: 'TEST_NAME5' },\n            { id: 'userId6', name: 'TEST_NAME6' },\n        ],\n    },\n\n    reducers: {\n        addUser: (state, action) => {\n            return {\n                ...state,\n                allUsers: [...state.allUsers, action.payload],\n            };\n        },\n        removeUser: (state, action) => {\n            return {\n                ...state,\n                allUsers: state.allUsers.filter((e) => e.id !== action.payload),\n            };\n        },\n    },\n});\n\nexport const { addUser, removeUser } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React from 'react';\nimport { Paper } from '@material-ui/core';\n\nconst CustomContainer = (props) => {\n    return (\n        <Paper\n            elevation={3}\n            style={{\n                display: 'flex',\n                justifyContent: 'space-around',\n                margin: '10px',\n                alignItems: 'center',\n                height: '50px',\n                ...props.style,\n            }}\n            data-testid=\"containerItem\"\n        >\n            {props.children}\n        </Paper>\n    );\n};\n\nexport default React.memo(CustomContainer);\n","import React, { useState } from 'react';\nimport { addUser, removeUser } from '../../slice/userSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { v4 as uuidV4 } from 'uuid';\nimport { useForm } from 'react-hook-form';\n\nimport { Button, TextField, IconButton } from '@material-ui/core';\nimport Paper from '../ContentContainers/CustomContainer';\nimport { Delete, Check } from '@material-ui/icons';\nimport Styles from './UserBoard.module.css';\n\nfunction UserBoard() {\n    const [showAddUserForm, setShowAddUserForm] = useState(false);\n\n    const { allUsers } = useSelector((state) => state.Users);\n    const dispatch = useDispatch();\n\n    const { register, handleSubmit, errors } = useForm();\n    return (\n        <div>\n            <h2>Users</h2>\n            {!showAddUserForm ? (\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        setShowAddUserForm(true);\n                    }}\n                >\n                    New User\n                </Button>\n            ) : (\n                <form\n                    className={Styles.addUserForm}\n                    onSubmit={handleSubmit((e) => {\n                        dispatch(\n                            addUser({\n                                id: uuidV4(),\n                                name: e.newName.toUpperCase(),\n                            })\n                        );\n                        setShowAddUserForm(false);\n                    })}\n                >\n                    <TextField\n                        type=\"text\"\n                        name=\"newName\"\n                        placeholder=\"Enter a new name\"\n                        inputRef={register({ required: true })}\n                        error={!!errors.newName}\n                        helperText={!!errors.newName ? 'Name is required' : ''}\n                    />\n                    <div className={Styles.formBtnGroup}>\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            endIcon={<Check />}\n                        >\n                            Confirm\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => setShowAddUserForm(false)}\n                        >\n                            cancel\n                        </Button>\n                    </div>\n                </form>\n            )}\n            {/* show user list */}\n            <ul className={Styles.unordered_list}>\n                {allUsers.map((e) => {\n                    let { id, name } = e;\n                    return (\n                        <li key={id}>\n                            <Paper\n                                style={{\n                                    alignItems: 'center',\n                                    margin: '10px',\n                                }}\n                            >\n                                <div>{name}</div>\n                                <IconButton\n                                    color=\"secondary\"\n                                    onClick={() => {\n                                        if (\n                                            window.confirm(\n                                                `Do you want to delete ${name}`\n                                            )\n                                        )\n                                            dispatch(removeUser(id));\n                                    }}\n                                >\n                                    <Delete />\n                                </IconButton>\n                            </Paper>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n\nexport default React.memo(UserBoard);\n","import React from 'react';\nimport PanelContainer from '../ContentContainers/PanelContainer';\nimport UserBoard from '../User/UserBoard';\n\nexport default function UserPanel() {\n    return (\n        <PanelContainer style={{ height: '100vh' }}>\n            <UserBoard />\n        </PanelContainer>\n    );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst billSlice = createSlice({\n    name: 'billSlice',\n    initialState: {\n        allBills: [\n            {\n                id: 'bill1',\n                payer: 'userId1',\n                amount: { amount: 10000, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId2'],\n                date: '2020-04-20',\n            },\n            {\n                id: 'bill2',\n                payer: 'userId2',\n                amount: { amount: 40000, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId2', 'userId3'],\n                date: '2020-01-01',\n            },\n            {\n                id: 'bill3',\n                payer: 'userId3',\n                amount: { amount: 50030, currency: 'USD', precision: 2 },\n                participants: ['userId3', 'userId2'],\n                date: '2020-02-05',\n            },\n            {\n                id: 'bill4',\n                payer: 'userId4',\n                amount: { amount: 20045, currency: 'USD', precision: 2 },\n                participants: ['userId1', 'userId5'],\n                date: '2020-02-09',\n            },\n            {\n                id: 'bill5',\n                payer: 'userId2',\n                amount: { amount: 10072, currency: 'USD', precision: 2 },\n                participants: ['userId5'],\n                date: '2019-12-05',\n            },\n            {\n                id: 'bill6',\n                payer: 'userId3',\n                amount: { amount: 7063, currency: 'USD', precision: 2 },\n                participants: [\n                    'userId1',\n                    'userId2',\n                    'userId3',\n                    'userId4',\n                    'userId5',\n                ],\n                date: '2019-12-05',\n            },\n        ],\n    },\n\n    reducers: {\n        addBill: (state, action) => {\n            return {\n                ...state,\n                allBills: [action.payload, ...state.allBills],\n            };\n        },\n        removeBill: (state, action) => {\n            return {\n                ...state,\n                allBills: state.allBills.filter((e) => e.id !== action.payload),\n            };\n        },\n    },\n});\n\nexport const { addBill, removeBill } = billSlice.actions;\n\nexport default billSlice.reducer;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useUserName = () => {\n    const { allUsers } = useSelector((state) => state.Users);\n    const id_name_map = useMemo(() => {\n        // console.log('new map');\n        return allUsers.reduce((acc, cur) => {\n            acc[cur.id] = cur.name;\n            return acc;\n        }, {});\n    }, [allUsers]);\n    return (id) => id_name_map[id];\n};\n// import { useEffect, useRef } from 'react';\n// import { useSelector } from 'react-redux';\n\n// export const useUserName = () => {\n//     const { allUsers } = useSelector((state) => state.Users);\n//     const ref = useRef();\n\n//     useEffect(() => {\n//         const id_name_map = allUsers.reduce((acc, cur) => {\n//             acc[cur.id] = cur.name;\n//             return acc;\n//         }, {});\n//         ref.current = (id) => id_name_map[id];\n//     }, [allUsers]);\n\n//     if (!ref.current) return (id) => id;\n//     return ref.current;\n// };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Grid, Slider, Input } from '@material-ui/core';\nimport { useUserName } from '../../hooks/useUserName';\n\nimport Dinero from 'dinero.js';\n\nconst throttle = (fn, delay) => {\n    let timer = null;\n    return (...args) => {\n        if (timer !== null) return;\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            fn(...args);\n        }, delay);\n    };\n};\n\nfunction MultiLineSlider({ formParticipants, totalAmount, outGoingRes }) {\n    const getUserById = useUserName();\n\n    const total = Dinero({\n        amount: +totalAmount * 100,\n        currency: 'USD',\n        precision: 2,\n    });\n\n    const [prevParticipantsNum, setPrevParticipantsNum] = useState(0);\n\n    const [prevTotalAmount, setPrevTotalAmount] = useState(-10);\n\n    const [inputValues, setInputValues] = useState(\n        total\n            .allocate(new Array(formParticipants.length).fill(1))\n            .map((e) => e.toJSON().amount / 10 ** total.getPrecision())\n    );\n\n    if (\n        prevParticipantsNum !== formParticipants.length ||\n        prevTotalAmount !== totalAmount\n    ) {\n        setInputValues(\n            total\n                .allocate(new Array(formParticipants.length).fill(1))\n                .map((e) => e.toJSON().amount / 10 ** total.getPrecision())\n        );\n        setPrevParticipantsNum(formParticipants.length);\n        setPrevTotalAmount(totalAmount);\n    }\n\n    useEffect(() => {\n        outGoingRes(inputValues);\n    });\n\n    const balanceSplitAmount = (changingIdx, newVal) => {\n        let diff =\n            inputValues.reduce((acc, cur, idx) => {\n                if (idx === changingIdx) {\n                    return acc + newVal;\n                } else {\n                    return acc + cur;\n                }\n            }, 0) - totalAmount;\n\n        if (diff <= 0) {\n            setInputValues(\n                inputValues.map((each, i) =>\n                    i === changingIdx ? newVal : each\n                )\n            );\n        } else {\n            setInputValues(\n                inputValues.map((each, i) => {\n                    if (i !== changingIdx) {\n                        if (each >= diff) {\n                            let res = each - diff;\n                            diff = 0;\n                            return res;\n                        } else {\n                            diff = diff - each;\n                            return 0;\n                        }\n                    } else return newVal;\n                })\n            );\n        }\n    };\n\n    return (\n        <Grid container direction=\"column\" style={{ alignItems: 'center' }}>\n            {formParticipants.map((eachParticipants, idx) => (\n                <Grid key={idx} container item xs spacing={2}>\n                    <Grid item>{getUserById(eachParticipants)}</Grid>\n                    <Grid item xs>\n                        <Slider\n                            value={inputValues[idx]}\n                            onChange={throttle(\n                                (e, newVal) => balanceSplitAmount(idx, +newVal),\n                                50\n                            )}\n                            min={0}\n                            max={+totalAmount}\n                            // step={10 ** -total.getPrecision()}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Input\n                            value={inputValues[idx]}\n                            onChange={(e) => {\n                                e.target.value === ''\n                                    ? balanceSplitAmount(idx, 0)\n                                    : balanceSplitAmount(idx, +e.target.value);\n                            }}\n                            onBlur={(e) => {\n                                if (+e.target.value < 0)\n                                    balanceSplitAmount(idx, 0);\n                                if (+e.target.value > totalAmount)\n                                    balanceSplitAmount(idx, totalAmount);\n                            }}\n                            inputProps={{\n                                // step: 10,\n                                min: 0,\n                                max: totalAmount,\n                                type: 'number',\n                                // 'aria-labelledby': 'input-slider',\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}\n\nMultiLineSlider.propTypes = {\n    formParticipants: PropTypes.array,\n    totalAmount: PropTypes.number,\n    outGoingRes: PropTypes.func,\n};\n\nexport default React.memo(MultiLineSlider);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Paper } from '@material-ui/core';\n\nconst Styles = {\n    background: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: '10',\n        overflow: 'auto',\n    },\n    contentWrapper: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '10px',\n        width: '40%',\n        backgroundColor: 'rgb(255, 255, 255)',\n    },\n};\n\nconst ModalBox = (props) => {\n    return (\n        <div\n            id=\"modalBox-background\"\n            style={Styles.background}\n            onClick={(e) => {\n                if (e.target.id === 'modalBox-background')\n                    props.onClickBackground();\n            }}\n        >\n            <Paper style={{ ...Styles.contentWrapper, ...props.style }}>\n                {props.children}\n            </Paper>\n        </div>\n    );\n};\n\nModalBox.propTypes = {\n    onClickBackground: PropTypes.func,\n    style: PropTypes.object,\n};\n\nexport default React.memo(ModalBox);\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addBill } from '../../slice/billSlice';\n\nimport { useForm, Controller } from 'react-hook-form';\nimport moment from 'moment';\nimport { v4 as uuidV4 } from 'uuid';\n\nimport {\n    Button,\n    IconButton,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    FormHelperText,\n    TextField,\n    Select,\n    MenuItem,\n    Switch,\n} from '@material-ui/core';\nimport { Add, Close } from '@material-ui/icons/';\nimport Styles from './AddBillForm.module.css';\nimport MultiLineSlider from './MultiLineSlider';\nimport ModalBox from '../ContentContainers/ModalBox';\n\nconst AddBillForm = () => {\n    const { allUsers } = useSelector((state) => state.Users);\n\n    const dispatch = useDispatch();\n\n    const { handleSubmit, register, watch, errors, control } = useForm();\n\n    const [showAddBillForm, setShowAddBillForm] = useState(false);\n\n    const showUnevenlySplit = watch('unevenly');\n    const formParticipants = watch('participants', []);\n    const formAmount = watch('amount', 0);\n\n    const [unevenlyRes, setUnevenlyRes] = useState([]);\n\n    // console.log(unevenlyRes);\n    return (\n        <div>\n            <Button\n                color=\"primary\"\n                onClick={() => setShowAddBillForm(true)}\n                data-testid=\"add-new-bill-btn\"\n                startIcon={<Add />}\n            >\n                Add New Bills\n            </Button>\n            {showAddBillForm && (\n                <ModalBox\n                    onClickBackground={() => {\n                        setShowAddBillForm(false);\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <h2>ADD NEW BILL</h2>\n                        <IconButton\n                            onClick={() => {\n                                setShowAddBillForm(false);\n                            }}\n                        >\n                            <Close />\n                        </IconButton>\n                    </div>\n                    <form\n                        data-testid=\"add-new-bill-form\"\n                        className={Styles.addBillForm}\n                        onSubmit={handleSubmit((e) => {\n                            if (!e.unevenly) {\n                                dispatch(\n                                    addBill({\n                                        id: uuidV4(),\n                                        payer: e.payer,\n                                        amount: {\n                                            amount: +e.amount * 100,\n                                            currency: 'USD',\n                                            precision: 2,\n                                        },\n                                        participants: e.participants,\n                                        date: e.date,\n                                    })\n                                );\n                            } else {\n                                e.participants.forEach((each, idx) => {\n                                    dispatch(\n                                        addBill({\n                                            id: uuidV4(),\n                                            payer: e.payer,\n                                            amount: {\n                                                amount: +unevenlyRes[idx] * 100,\n                                                currency: 'USD',\n                                                precision: 2,\n                                            },\n                                            participants: [each],\n                                            date: e.date,\n                                        })\n                                    );\n                                });\n                            }\n                            setShowAddBillForm(false);\n                        })}\n                    >\n                        {/* payer */}\n                        <FormControl error={!!errors.payer}>\n                            <InputLabel id=\"Payer_label\"> Payer </InputLabel>\n                            <Controller\n                                as={\n                                    <Select labelId=\"Payer_label\" value=\"\">\n                                        {allUsers.map((e) => (\n                                            <MenuItem key={e.id} value={e.id}>\n                                                {e.name}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                }\n                                name=\"payer\"\n                                defaultValue=\"\"\n                                control={control}\n                                rules={{ required: 'Select one payer' }}\n                            />\n                            <FormHelperText>\n                                {!!errors.payer && errors.payer.message}\n                            </FormHelperText>\n                        </FormControl>\n                        {/* amount */}\n                        <TextField\n                            data-testid=\"add-bill-amount\"\n                            label=\"Amount\"\n                            name=\"amount\"\n                            type=\"number\"\n                            inputProps={{ step: '0.01' }}\n                            inputRef={register({\n                                required: 'Need amount',\n                                pattern: {\n                                    value: /^(\\d{1,15}|\\d{0,15}\\.\\d{1,2}|.)$/,\n                                    message: 'amount number not valid',\n                                },\n                            })}\n                            error={!!errors.amount}\n                            helperText={\n                                !!errors.amount && errors.amount.message\n                            }\n                        />\n                        {/* Participant */}\n                        <FormControl error={!!errors.participants}>\n                            <InputLabel id=\"test\"> Participant(s) </InputLabel>\n                            <Controller\n                                as={\n                                    <Select multiple labelId=\"test\">\n                                        {allUsers.map((e) => (\n                                            <MenuItem key={e.id} value={e.id}>\n                                                {e.name}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                }\n                                name=\"participants\"\n                                defaultValue={[]}\n                                control={control}\n                                rules={{\n                                    required: true,\n                                    validate: (value) =>\n                                        value.length > 0 ||\n                                        'At least one participant',\n                                }}\n                            />\n                            <FormHelperText>\n                                {!!errors.participants &&\n                                    errors.participants.message}\n                            </FormHelperText>\n                        </FormControl>\n                        {/* dates */}\n                        <TextField\n                            label=\"date\"\n                            type=\"date\"\n                            inputRef={register({ required: 'date required' })}\n                            name=\"date\"\n                            defaultValue={moment().format('YYYY-MM-DD')}\n                            error={!!errors.date}\n                            helperText={!!errors.date && errors.date.message}\n                        />\n\n                        {/* show unevenly split */}\n                        <FormControlLabel\n                            labelPlacement=\"start\"\n                            label=\"Unevenly split\"\n                            control={\n                                <Controller\n                                    render={(props) => (\n                                        <Switch\n                                            checked={props.value}\n                                            onChange={(e) =>\n                                                props.onChange(e.target.checked)\n                                            }\n                                            color=\"primary\"\n                                            aria-labelledby=\"open-unevenly\"\n                                        />\n                                    )}\n                                    name=\"unevenly\"\n                                    defaultValue={false}\n                                    control={control}\n                                />\n                            }\n                        />\n\n                        {showUnevenlySplit &&\n                            !!formParticipants.length &&\n                            !!formAmount && (\n                                <MultiLineSlider\n                                    formParticipants={formParticipants}\n                                    totalAmount={+formAmount}\n                                    outGoingRes={setUnevenlyRes}\n                                />\n                            )}\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            data-testid=\"submit-btn\"\n                        >\n                            Confirm\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                setShowAddBillForm(false);\n                            }}\n                            data-testid=\"cancel-btn\"\n                        >\n                            Cancel\n                        </Button>\n                    </form>\n                </ModalBox>\n            )}\n        </div>\n    );\n};\n\nexport default AddBillForm;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalBox from '../../ContentContainers/ModalBox';\nimport {\n    Button,\n    IconButton,\n    OutlinedInput,\n    Typography,\n} from '@material-ui/core';\nimport { Delete, Close } from '@material-ui/icons';\n\nconst DeleteBtnWithConfirmModal = ({\n    confirmMessage,\n    onClickConfirmDeleteButton,\n}) => {\n    const [confirmTapping, setConfirmTapping] = useState('');\n\n    const [showModal, setShowModal] = useState(false);\n\n    const closeModal = () => {\n        setConfirmTapping('');\n        setShowModal(false);\n    };\n\n    return (\n        <div>\n            <IconButton\n                color=\"secondary\"\n                onClick={() => {\n                    setShowModal(true);\n                }}\n            >\n                <Delete />\n            </IconButton>\n\n            {showModal && (\n                <ModalBox\n                    onClickBackground={() => closeModal()}\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        padding: '20px',\n                    }}\n                >\n                    <IconButton\n                        onClick={() => closeModal()}\n                        style={{ alignSelf: 'flex-end' }}\n                    >\n                        <Close />\n                    </IconButton>\n                    <Typography\n                        fontWeight=\"fontWeightBold\"\n                        style={{ margin: '10px 0' }}\n                    >\n                        Please type\n                        <span> {confirmMessage} </span>\n                        to confirm.\n                    </Typography>\n                    <OutlinedInput\n                        id=\"component-outlined\"\n                        placeholder=\"Confirm\"\n                        value={confirmTapping}\n                        onChange={(e) => {\n                            setConfirmTapping(e.target.value);\n                        }}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={confirmMessage !== confirmTapping}\n                        style={{ marginTop: '10px ' }}\n                        onClick={() => {\n                            onClickConfirmDeleteButton();\n                            closeModal();\n                        }}\n                    >\n                        Delete\n                    </Button>\n                </ModalBox>\n            )}\n        </div>\n    );\n};\n\nDeleteBtnWithConfirmModal.propTypes = {\n    confirmMessage: PropTypes.string.isRequired,\n    onClickConfirmDeleteButton: PropTypes.func.isRequired,\n};\n\nexport default React.memo(DeleteBtnWithConfirmModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { removeBill } from '../../../slice/billSlice';\n\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n} from '@material-ui/core';\n\nimport DeleteBtnConfirmModal from './DeleteBtnWithConfirmModal';\n\nconst OneTableRow = ({ rowData }) => {\n    const dispatch = useDispatch();\n    return (\n        <>\n            <TableRow data-testid=\"billItem\">\n                <TableCell align=\"center\">{rowData.payer}</TableCell>\n                <TableCell align=\"center\">{rowData.amount}</TableCell>\n                <TableCell align=\"center\">{rowData.participants}</TableCell>\n                <TableCell align=\"center\">{rowData.date}</TableCell>\n                <TableCell align=\"center\">\n                    <DeleteBtnConfirmModal\n                        confirmMessage=\"123\"\n                        onClickConfirmDeleteButton={() => {\n                            dispatch(removeBill(rowData.id));\n                        }}\n                    />\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nconst BillTableDisplay = ({ tableData }) => {\n    return (\n        <TableContainer component={Paper}>\n            <Table style={{ minWidth: '500px' }} aria-label=\"bill-table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"center\">Who Paid</TableCell>\n                        <TableCell align=\"center\">Amount</TableCell>\n                        <TableCell align=\"center\">Participant(s)</TableCell>\n                        <TableCell align=\"center\">Date</TableCell>\n                        <TableCell align=\"center\"></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tableData.map((row, idx) => (\n                        <OneTableRow rowData={row} key={idx}></OneTableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nOneTableRow.propTypes = {\n    rowData: PropTypes.object.isRequired,\n};\n\nBillTableDisplay.propTypes = {\n    tableData: PropTypes.array.isRequired,\n};\n\nexport default React.memo(BillTableDisplay);\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Dinero from 'dinero.js';\nimport { useUserName } from '../../hooks/useUserName';\n\nimport BillTableDisplay from './widget/BillTableDisplay';\n\nconst BillDisplay = () => {\n    const { allBills } = useSelector((state) => state.Bills);\n    const getNameById = useUserName();\n\n    const tableData = useMemo(() => {\n        return allBills.map((e) => {\n            return {\n                id: e.id,\n                payer: getNameById(e.payer),\n                amount: Dinero(e.amount).toFormat(),\n                participants: e.participants.map((e) => getNameById(e)),\n                date: e.date,\n            };\n        });\n    }, [allBills, getNameById]);\n\n    return (\n        <div>\n            <BillTableDisplay tableData={tableData} />\n        </div>\n    );\n};\n\nexport default BillDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n} from '@material-ui/core';\nconst TableDisplay = (props) => {\n    const { headers, tableData } = props;\n    return (\n        <TableContainer component={Paper}>\n            <Table style={{ minWidth: '500px' }} aria-label=\"table\">\n                <TableHead>\n                    <TableRow>\n                        {headers.map((eachHead, idx) => (\n                            <TableCell align=\"center\" key={idx}>\n                                {eachHead}\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {tableData.map((row, idx) => (\n                        <TableRow key={idx}>\n                            {row.map((e, i) => (\n                                <TableCell align=\"center\" key={i}>\n                                    {e}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nTableDisplay.propTypes = {\n    headers: PropTypes.array.isRequired,\n    tableData: PropTypes.array.isRequired,\n};\n\nexport default TableDisplay;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { addBill } from '../../slice/billSlice';\nimport { v4 as uuidV4 } from 'uuid';\nimport moment from 'moment';\n\nimport { Archive } from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\n\nimport TableDisplay from '../ContentContainers/TableDisplay';\nimport { useUserName } from '../../hooks/useUserName';\n\nconst SummaryDisplay = ({ summary, merged }) => {\n    // get name hook\n    const getNameById = useUserName();\n    const dispatch = useDispatch();\n\n    const tableData = useMemo(() => {\n        if (merged) {\n            return summary.map((e) => {\n                return [\n                    getNameById(e.from) + '---->' + getNameById(e.to),\n                    e.amount.toFormat(),\n                ];\n            });\n        } else {\n            return summary.map((e) => {\n                return [\n                    getNameById(e.from) + '---->' + getNameById(e.to),\n                    e.amount.toFormat(),\n                    <IconButton\n                        color=\"primary\"\n                        onClick={() => {\n                            dispatch(\n                                addBill({\n                                    id: uuidV4(),\n                                    payer: e.from,\n                                    amount: e.amount.toJSON(),\n                                    participants: [e.to],\n                                    date: moment().format('YYYY-MM-DD'),\n                                })\n                            );\n                        }}\n                    >\n                        <Archive />\n                    </IconButton>,\n                ];\n            });\n        }\n    }, [summary, merged, dispatch, getNameById]);\n\n    return (\n        <div>\n            {merged ? (\n                <TableDisplay\n                    tableData={tableData}\n                    headers={['Transform', 'Amount']}\n                />\n            ) : (\n                <TableDisplay\n                    tableData={tableData}\n                    headers={['Transform', 'Amount', '']}\n                />\n            )}\n        </div>\n    );\n};\n\nSummaryDisplay.prototype = {\n    summary: PropTypes.array,\n    merged: PropTypes.bool,\n};\n\nexport default React.memo(SummaryDisplay);\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport Dinero from 'dinero.js';\n\nconst useSummary = () => {\n    const { allBills } = useSelector((state) => state.Bills);\n    const summary = useMemo(() => {\n        let m = new Map();\n        for (let bill of allBills) {\n            let oriCurrency = Dinero(bill.amount);\n            let allocate = oriCurrency.allocate(\n                Array(bill.participants.length).fill(1)\n            );\n            for (let i = 0, len = bill.participants.length; i < len; ++i) {\n                if (bill.participants[i] !== bill.payer) {\n                    let from = bill.participants[i],\n                        to = bill.payer,\n                        amount = allocate[i],\n                        key = '';\n                    if (from < to) {\n                        key = JSON.stringify([from, to]);\n                    } else {\n                        key = JSON.stringify([to, from]);\n                        amount = Dinero({ amount: 0 }).subtract(amount);\n                    }\n                    if (!m.has(key)) m.set(key, amount);\n                    else {\n                        m.set(key, m.get(key).add(amount));\n                    }\n                }\n            }\n\n            // m.forEach((val, key) => {\n            //     console.log(key, val.getAmount());\n            // });\n        }\n        // analysis map\n        let res = [];\n        m.forEach((val, key) => {\n            let [from, to] = JSON.parse(key);\n            if (val.getAmount() > 0) {\n                res.push({\n                    from,\n                    to,\n                    amount: val,\n                });\n            } else if (val.getAmount() === 0) {\n                return;\n            } else {\n                res.push({\n                    from: to,\n                    to: from,\n                    amount: Dinero({ amount: 0 }).subtract(val),\n                });\n            }\n        });\n\n        return res;\n    }, [allBills]);\n\n    const [payerList, receiverList] = useMemo(() => {\n        let record = {};\n\n        for (let each of summary) {\n            record[each.from] = 0;\n            record[each.to] = 0;\n        }\n\n        for (let each of summary) {\n            if (each.amount.getAmount() > 0) {\n                record[each.from] -= each.amount.getAmount();\n                record[each.to] += each.amount.getAmount();\n            } else {\n                // < 0 (not == 0)\n                record[each.from] += each.amount.getAmount();\n                record[each.to] -= each.amount.getAmount();\n            }\n        }\n\n        let payerList = [],\n            receiverList = [];\n        for (let each in record) {\n            if (record[each] < 0) {\n                payerList.push([each, record[each]]);\n            } else if (record[each] > 0) {\n                receiverList.push([each, record[each]]);\n            } else {\n                // record[each] == 0\n                continue;\n            }\n        }\n        // sort two list\n        payerList.sort((a, b) => a[1] - b[1]);\n        receiverList.sort((a, b) => b[1] - a[1]);\n\n        return [payerList, receiverList];\n    }, [summary]);\n\n    return [summary, payerList, receiverList];\n};\n\nexport default useSummary;\n","import React, { useState } from 'react';\n\nimport Dinero from 'dinero.js';\nimport SummaryDisplay from './SummaryDisplay';\n\nimport { TextField, MenuItem, Checkbox } from '@material-ui/core';\nimport styles from './SummaryBoard.module.css';\n\nimport useSummary from '../../hooks/useSummary';\n\n// compose(f1, f2, f3)(val) === f3(f2(f1(val)))\nconst compose = (...fn) =>\n    fn.reduce(\n        (acc, cur) => (...args) => cur(acc(...args)),\n        (val) => val\n    );\n\nconst SummaryBoard = () => {\n    const [summary, payerList, receiverList] = useSummary();\n\n    const [merged, setMerged] = useState(false);\n    const [sortState, setSortState] = useState(0);\n\n    const sortSummary = (oriSummary) => {\n        if (sortState === 0) {\n            oriSummary.sort((a, b) => {\n                if (a.from < b.from) return -1;\n                else return 1;\n            });\n        }\n        if (sortState === 1) {\n            oriSummary.sort((a, b) => {\n                if (a.to < b.to) return -1;\n                else return 1;\n            });\n        }\n        if (sortState === 2) {\n            oriSummary.sort(\n                (a, b) => a.amount.getAmount() - b.amount.getAmount()\n            );\n        }\n        if (sortState === 3) {\n            oriSummary.sort(\n                (a, b) => b.amount.getAmount() - a.amount.getAmount()\n            );\n        }\n        return [...oriSummary];\n    };\n    const mergeSummary = (oriSummary) => {\n        if (!merged) {\n            return oriSummary;\n        }\n\n        // Greedy method to calculate a relative less transaction\n        let res = [];\n        let payerListCopy = payerList.map((e) => [...e]),\n            receiverListCopy = receiverList.map((e) => [...e]);\n        while (payerListCopy.length !== 0) {\n            let curPayer = payerListCopy.pop();\n            while (curPayer[1] !== 0) {\n                // current payer still need pay somebody\n                let curReceiver = receiverListCopy.pop();\n                if (curReceiver[1] <= Math.abs(curPayer[1])) {\n                    res.push({\n                        from: curPayer[0],\n                        to: curReceiver[0],\n                        amount: Dinero({ amount: curReceiver[1] }),\n                    });\n                    curPayer[1] += curReceiver[1];\n                } else {\n                    res.push({\n                        from: curPayer[0],\n                        to: curReceiver[0],\n                        amount: Dinero({ amount: 0 - curPayer[1] }),\n                    });\n                    curReceiver[1] -= Math.abs(curPayer[1]);\n                    curPayer[1] = 0;\n                    receiverListCopy.push(curReceiver);\n                }\n            }\n        }\n        return res;\n    };\n\n    //compose filter function\n    const filterFns = compose(mergeSummary, sortSummary);\n    return (\n        <div>\n            {/* tool bar */}\n            <div className={styles.tools}>\n                <TextField\n                    select\n                    value={sortState}\n                    onChange={(e) => {\n                        setSortState(e.target.value);\n                    }}\n                    label=\"Arrangement\"\n                >\n                    <MenuItem value={0}>Group By Payer</MenuItem>\n                    <MenuItem value={1}>Group By Receiver</MenuItem>\n                    <MenuItem value={2}>Amount Increasing</MenuItem>\n                    <MenuItem value={3}>Amount Decreasing</MenuItem>\n                </TextField>\n                <div className={styles.switchGroup}>\n                    <Checkbox\n                        checked={merged}\n                        onChange={(e) => {\n                            setMerged(e.target.checked);\n                        }}\n                        color=\"primary\"\n                        name=\"Merge\"\n                    />\n                    <span>Merged Bills Summary</span>\n                </div>\n            </div>\n\n            <SummaryDisplay summary={filterFns(summary)} merged={merged} />\n        </div>\n    );\n};\n\nexport default SummaryBoard;\n","import React, { useMemo } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { useUserName } from '../../../hooks/useUserName';\n\nconst nextColor = (function () {\n    // console.log('next color fun');\n    const COLOR_LIST = [\n        '#efb4c1',\n        '#c8707e',\n        '#5aa08d',\n        '#e28fad',\n        '#e48e58',\n        '#f0c7ab',\n        '#edaa7d',\n        '#a8c879',\n        '#678fae',\n        '#ac99c1',\n        '#96b1d0',\n        '#ada759',\n        '#c08863',\n        '#4c92b1',\n        '#c8c2bd',\n    ];\n    let idx = 0;\n\n    return () => {\n        let next = COLOR_LIST[idx];\n        idx = (idx + 1) % COLOR_LIST.length;\n        return next;\n    };\n})();\nconst HOVER_COLOR = 'rgba(54, 162, 235, 0.6)';\nconst options = {\n    legend: {\n        position: 'left',\n\n        labels: {\n            fontSize: 20,\n\n            generateLabels: (chart) => {\n                let {\n                    data: { datasets },\n                } = chart;\n                let res = [];\n\n                datasets.forEach((eachSet) => {\n                    res = res.concat(\n                        eachSet.labels.map((e, idx) => {\n                            return {\n                                text: e,\n                                fillStyle: eachSet.backgroundColor[idx],\n                            };\n                        })\n                    );\n                });\n                return res;\n            },\n        },\n    },\n    tooltips: {\n        bodyFontSize: 20,\n        callbacks: {\n            label: (tooltipItem, data) => {\n                let label =\n                    data.datasets[tooltipItem.datasetIndex].labels[\n                        tooltipItem.index\n                    ];\n                let value =\n                    data.datasets[tooltipItem.datasetIndex].data[\n                        tooltipItem.index\n                    ];\n                return value < 0\n                    ? `${label} need spend $${-value}`\n                    : `${label} will receive $${value}`;\n            },\n        },\n    },\n};\n\nconst UserMoneyStatusPieChart = ({ payerList, receiverList }) => {\n    const getNameById = useUserName();\n\n    const renderData = useMemo(() => {\n        return {\n            datasets: [\n                {\n                    label: 'will receive',\n                    data: receiverList.map((e) => e[1] / 100),\n                    labels: receiverList.map((e) => getNameById(e[0])),\n                    backgroundColor: receiverList.map(() => nextColor()),\n                    borderColor: '#fff',\n                    borderWidth: 8,\n                    hoverBackgroundColor: HOVER_COLOR,\n                },\n                {\n                    label: 'need spend',\n                    data: payerList.map((e) => e[1] / 100),\n                    labels: payerList.map((e) => getNameById(e[0])),\n                    backgroundColor: payerList.map(() => nextColor()),\n                    borderColor: '#fff',\n                    borderWidth: 4,\n                    hoverBackgroundColor: HOVER_COLOR,\n                },\n            ],\n        };\n    }, [payerList, receiverList, getNameById]);\n\n    if (payerList.length === 0 || receiverList.length === 0) return <div></div>;\n\n    return (\n        <div data-testid=\"pieChart\">\n            <Pie data={renderData} options={options} />\n        </div>\n    );\n};\n\nexport default React.memo(UserMoneyStatusPieChart);\n","import React, { useState } from 'react';\nimport AddBillForm from '../Bill/AddBillForm';\nimport BillDisplay from '../Bill/BillDisplay';\nimport SummaryBoard from '../Summary/SummaryBoard';\nimport PanelContainer from '../ContentContainers/PanelContainer';\n\nimport { Tabs, Tab, Switch } from '@material-ui/core';\n\nimport PieChart from '../Summary/Charts/UserMoneyStatusPieChart';\nimport useSummary from '../../hooks/useSummary';\n\nexport default function BillPanel() {\n    const [showChart, setShowChart] = useState(false);\n    const [, payerList, receiverList] = useSummary();\n\n    const [tabIdx, setTabIdx] = useState(0);\n\n    return (\n        <PanelContainer style={{ height: '100vh' }}>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                }}\n            >\n                <Tabs\n                    value={tabIdx}\n                    onChange={(e, newIdx) => setTabIdx(newIdx)}\n                    indicatorColor=\"primary\"\n                    aria-label=\"tabs\"\n                >\n                    <Tab label=\"bill Record\" />\n                    <Tab label=\"transition\" />\n                    <Tab label=\"summary\" />\n                </Tabs>\n                <AddBillForm />\n            </div>\n\n            <div style={{ display: tabIdx === 0 ? 'block' : 'none' }}>\n                <BillDisplay />\n            </div>\n            <div style={{ display: tabIdx === 1 ? 'block' : 'none' }}>\n                <SummaryBoard />\n            </div>\n            {tabIdx === 2 && (\n                <div>\n                    <Switch\n                        checked={showChart}\n                        onChange={(e) => {\n                            setShowChart(e.target.checked);\n                        }}\n                        color=\"primary\"\n                        name=\"show-chart\"\n                    />\n                    {showChart && (\n                        <PieChart\n                            payerList={payerList}\n                            receiverList={receiverList}\n                        />\n                    )}\n                </div>\n            )}\n        </PanelContainer>\n    );\n}\n","import React from 'react';\nimport UserPanel from './UserPanel';\nimport BillPanel from './BillPanel';\nimport { Grid } from '@material-ui/core';\n\nexport default function Layout() {\n    return (\n        <>\n            <Grid container>\n                <Grid item sm={10}>\n                    <BillPanel />\n                </Grid>\n                <Grid item sm={2}>\n                    <UserPanel />\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport billReducer from '../slice/billSlice';\nimport userReducer from '../slice/userSlice';\n\nexport default configureStore({\n    reducer: {\n        Users: userReducer,\n        Bills: billReducer,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <Provider store={store}>\n//             <App />\n//         </Provider>\n//     </React.StrictMode>,\n//     document.getElementById('root')\n// );\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"UserBoard_item__37cEp\",\"unordered_list\":\"UserBoard_unordered_list__38CV5\",\"addUserForm\":\"UserBoard_addUserForm__3Lc7h\",\"formBtnGroup\":\"UserBoard_formBtnGroup__3pHvk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tools\":\"SummaryBoard_tools__18hv4\",\"switchGroup\":\"SummaryBoard_switchGroup__3tzj3\"};"],"sourceRoot":""}